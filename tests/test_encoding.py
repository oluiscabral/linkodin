"""Test encoding for Brazilian Portuguese and other non-ASCII characters."""

import json
import os
import tempfile
import pytest
import sys
sys.path.append('src')
from entities.persona import Persona
from infrastructure.file_persona_repository import FilePersonaRepository
from infrastructure.file_post_repository import FilePostRepository
from entities.post import LinkedInPost
from datetime import datetime
import uuid
import asyncio


@pytest.mark.asyncio
async def test_persona_encoding_portuguese():
    """Test that Portuguese accents are properly saved and loaded."""
    with tempfile.NamedTemporaryFile(mode='w+', suffix='.json', delete=False) as tmp:
        tmp_path = tmp.name
    
    try:
        # Create a persona with Portuguese accents
        persona = Persona(
            id="test-br",
            name="Jo√£o Silva",
            niche="Tecnologia",
            target_audience="Desenvolvedores brasileiros",
            localization="Portugu√™s (Brasil)",
            tone="amig√°vel",
            industry="Engenharia de Software",
            experience_level="S√™nior",
            content_themes=["programa√ß√£o", "educa√ß√£o"],
            engagement_style="hist√≥rias pessoais",
            personal_brand_keywords=["inova√ß√£o", "tecnologia"],
            posting_frequency="diariamente",
            description="Especialista em desenvolvimento"
        )
        
        repo = FilePersonaRepository(tmp_path)
        await repo.save_persona(persona)
        
        # Verify the persona was saved correctly
        retrieved = await repo.get_persona_by_id("test-br")
        assert retrieved is not None
        assert retrieved.name == "Jo√£o Silva"
        assert retrieved.localization == "Portugu√™s (Brasil)"
        assert retrieved.experience_level == "S√™nior"
        
        # Verify no escaped unicode in the JSON file
        with open(tmp_path, 'r', encoding='utf-8') as f:
            content = f.read()
            assert "\\u00" not in content
            assert "Jo√£o" in content
            assert "Portugu√™s" in content
            assert "S√™nior" in content
            
    finally:
        os.unlink(tmp_path)


@pytest.mark.asyncio
async def test_post_encoding_portuguese():
    """Test that Portuguese content in posts is properly saved and loaded."""
    with tempfile.NamedTemporaryFile(mode='w+', suffix='.json', delete=False) as tmp:
        tmp_path = tmp.name
    
    try:
        # Create a post with Portuguese content
        post = LinkedInPost(
            id=str(uuid.uuid4()),
            persona_id="test-br",
            content="üöÄ Programa√ß√£o n√£o √© apenas c√≥digo.\n\n√â criatividade e solu√ß√£o de problemas!\n\n#programa√ß√£o #tecnologia",
            image_prompt="Foto de um desenvolvedor trabalhando",
            market_analysis="An√°lise do mercado brasileiro de tecnologia",
            generation_prompt="Crie um post sobre programa√ß√£o para desenvolvedores brasileiros",
            created_at=datetime.now()
        )
        
        repo = FilePostRepository(tmp_path)
        await repo.save_post(post)
        
        # Verify the post was saved correctly
        retrieved = await repo.get_post_by_id(post.id)
        assert retrieved is not None
        assert "Programa√ß√£o n√£o √©" in retrieved.content
        assert "tecnologia" in retrieved.content
        assert "An√°lise" in retrieved.market_analysis
        
        # Verify no escaped unicode in the JSON file
        with open(tmp_path, 'r', encoding='utf-8') as f:
            content = f.read()
            assert "\\u00" not in content
            assert "Programa√ß√£o n√£o" in content
            assert "An√°lise" in content
            
    finally:
        os.unlink(tmp_path)


@pytest.mark.asyncio
async def test_various_accents_and_characters():
    """Test various international characters and accents."""
    with tempfile.NamedTemporaryFile(mode='w+', suffix='.json', delete=False) as tmp:
        tmp_path = tmp.name
    
    try:
        # Create personas with various international characters
        personas = [
            Persona(
                id="french-test",
                name="Fran√ßois M√ºller",
                niche="Technologie",
                target_audience="Entrepreneurs fran√ßais",
                localization="Fran√ßais (France)",
                tone="professionnel",
                industry="Technologie",
                experience_level="Exp√©riment√©",
                content_themes=["innovation", "d√©veloppement"],
                engagement_style="r√©cits personnels",
                personal_brand_keywords=["technologie", "cr√©ativit√©"],
                posting_frequency="hebdomadaire"
            ),
            Persona(
                id="spanish-test", 
                name="Jos√© Mar√≠a P√©rez",
                niche="Tecnolog√≠a",
                target_audience="Emprendedores espa√±oles",
                localization="Espa√±ol (Espa√±a)",
                tone="profesional",
                industry="Tecnolog√≠a",
                experience_level="Experto",
                content_themes=["innovaci√≥n", "desarrollo"],
                engagement_style="narrativa personal",
                personal_brand_keywords=["tecnolog√≠a", "innovaci√≥n"],
                posting_frequency="semanal"
            ),
            Persona(
                id="german-test",
                name="Bj√∂rn M√ºller",
                niche="Technologie",
                target_audience="Deutsche Unternehmer",
                localization="Deutsch (Deutschland)",
                tone="professionell",
                industry="Technologie", 
                experience_level="Erfahren",
                content_themes=["Innovation", "Entwicklung"],
                engagement_style="pers√∂nliche Geschichten",
                personal_brand_keywords=["Technologie", "Kreativit√§t"],
                posting_frequency="w√∂chentlich"
            )
        ]
        
        repo = FilePersonaRepository(tmp_path)
        
        for persona in personas:
            await repo.save_persona(persona)
            retrieved = await repo.get_persona_by_id(persona.id)
            assert retrieved is not None
            assert retrieved.name == persona.name
            assert retrieved.localization == persona.localization
        
        # Verify no escaped unicode in the JSON file
        with open(tmp_path, 'r', encoding='utf-8') as f:
            content = f.read()
            assert "\\u00" not in content
            # Check some specific characters are preserved
            assert "Fran√ßois" in content
            assert "Jos√© Mar√≠a" in content
            assert "Bj√∂rn" in content
            assert "Exp√©riment√©" in content
            assert "Espa√±ol" in content
            assert "pers√∂nliche" in content
            
    finally:
        os.unlink(tmp_path)


def test_json_ensure_ascii_false():
    """Test that json.dump with ensure_ascii=False preserves non-ASCII characters."""
    test_data = {
        "portuguese": "Programa√ß√£o n√£o √© dif√≠cil",
        "french": "Fran√ßais avec des accents",
        "german": "Bj√∂rn M√ºller",
        "spanish": "Jos√© Mar√≠a P√©rez"
    }
    
    with tempfile.NamedTemporaryFile(mode='w+', suffix='.json', delete=False) as tmp:
        tmp_path = tmp.name
    
    try:
        # Write with ensure_ascii=False
        with open(tmp_path, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, ensure_ascii=False, indent=2)
        
        # Read back and verify
        with open(tmp_path, 'r', encoding='utf-8') as f:
            content = f.read()
            loaded_data = json.loads(content)
        
        # Verify data integrity
        assert loaded_data == test_data
        
        # Verify no escaped sequences
        assert "\\u00" not in content
        assert "Programa√ß√£o n√£o" in content
        assert "Fran√ßais" in content
        assert "Bj√∂rn" in content
        assert "Jos√© Mar√≠a" in content
        
    finally:
        os.unlink(tmp_path)